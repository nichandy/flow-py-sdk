{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Overview \u00b6 Current Version: flow-py-sdk \u00b6 Another unofficial flow blockchain python sdk. Which can be found here: https://janezpodhostnik.github.io/flow-py-sdk/. Under development! Currently this is close to an \"MVP\" it is mostly missing more of: docs, tests, examples and organization. If you do want to use it, install it with: pip install flow-py-sdk Or if using poetry: poetry add flow-py-sdk","title":"Overview"},{"location":"#overview","text":"Current Version:","title":"Overview"},{"location":"#flow-py-sdk","text":"Another unofficial flow blockchain python sdk. Which can be found here: https://janezpodhostnik.github.io/flow-py-sdk/. Under development! Currently this is close to an \"MVP\" it is mostly missing more of: docs, tests, examples and organization. If you do want to use it, install it with: pip install flow-py-sdk Or if using poetry: poetry add flow-py-sdk","title":"flow-py-sdk"},{"location":"cadence_types/","text":"Cadence types \u00b6 \u26cf\ufe0f WIP","title":"Cadence Types"},{"location":"cadence_types/#cadence-types","text":"\u26cf\ufe0f WIP","title":"Cadence types"},{"location":"contributing/","text":"Contributing \u00b6 Any contributions are very welcome. If you would like to contribute to the code, the best place to start is to run the examples locally. After that your environment will be set up for development. If you don't have anything specific in mind but still want to contribute make sure to check the roadmap for ideas.","title":"Contributing"},{"location":"contributing/#contributing","text":"Any contributions are very welcome. If you would like to contribute to the code, the best place to start is to run the examples locally. After that your environment will be set up for development. If you don't have anything specific in mind but still want to contribute make sure to check the roadmap for ideas.","title":"Contributing"},{"location":"emulator/","text":"Running the emulator \u00b6 To run the examples, the flow emulator needs to be running locally. To do that you can use the following instructions or the instructions directly at https://github.com/onflow/flow-emulator. Install the Flow CLI . Start the Flow Emulator in the examples directory of this repository (where the flow.json config is) using the command: flow emulator start","title":"Working with the Flow emulator"},{"location":"emulator/#running-the-emulator","text":"To run the examples, the flow emulator needs to be running locally. To do that you can use the following instructions or the instructions directly at https://github.com/onflow/flow-emulator. Install the Flow CLI . Start the Flow Emulator in the examples directory of this repository (where the flow.json config is) using the command: flow emulator start","title":"Running the emulator"},{"location":"events/","text":"Events \u00b6 \u26cf\ufe0f WIP","title":"Events"},{"location":"events/#events","text":"\u26cf\ufe0f WIP","title":"Events"},{"location":"examples/","text":"Examples \u00b6 Examples are meant to illustrate usage of flow-py-sdk . They can be found here Running The examples \u00b6 In case you want to debug the examples, or you just want to see them in action you can use the following steps. 1. Prerequisites \u00b6 a locally running emulator a checkout of flow-py-sdk python 3.9 or higher poetry Run poetry install in the root of the checkout to install dependencies from pyproject.toml . 2. Run examples \u00b6 To run all the examples use: poetry run examples To run specific examples you can use the tag of the examples: poetry run examples [ExampleTag] e.g.: poetry run examples T.1. T.2. S.4.","title":"Examples"},{"location":"examples/#examples","text":"Examples are meant to illustrate usage of flow-py-sdk . They can be found here","title":"Examples"},{"location":"examples/#running-the-examples","text":"In case you want to debug the examples, or you just want to see them in action you can use the following steps.","title":"Running The examples"},{"location":"examples/#1-prerequisites","text":"a locally running emulator a checkout of flow-py-sdk python 3.9 or higher poetry Run poetry install in the root of the checkout to install dependencies from pyproject.toml .","title":"1. Prerequisites"},{"location":"examples/#2-run-examples","text":"To run all the examples use: poetry run examples To run specific examples you can use the tag of the examples: poetry run examples [ExampleTag] e.g.: poetry run examples T.1. T.2. S.4.","title":"2. Run examples"},{"location":"installation/","text":"Installation \u00b6 Prerequisites \u00b6 Python version 3.9 or higher. Install \u00b6 With pip: pip install flow-py-sdk with poetry: poetry add flow-py-sdk","title":"Installation"},{"location":"installation/#installation","text":"","title":"Installation"},{"location":"installation/#prerequisites","text":"Python version 3.9 or higher.","title":"Prerequisites"},{"location":"installation/#install","text":"With pip: pip install flow-py-sdk with poetry: poetry add flow-py-sdk","title":"Install"},{"location":"roadmap/","text":"Roadmap \u00b6 \u26cf\ufe0f WIP MVP Roadmap \u00b6 Items that need to be addressed for flow-py-sdk to be considered usable. At which point it will become V1. Any contributions to items on this list (or not on the list and you think they should be) are very welcome. Docs \u00b6 [x] Create docs folder [x] setup mkdocs [ ] Usage example docs: [ ] create account [ ] transfer flow [ ] contribution docs Examples \u00b6 [x] move examples folder to root folder [x] make each example runnable separately [x] write instructions for running examples [ ] add more comments to examples [x] add examples to ci [ ] add more examples Tests \u00b6 [x] add cadence decode/encode tests [ ] add more tests [x] add CI for tests CI \u00b6 [x] release automation Implementation \u00b6 [x] decode event payload from grpc [x] implement TODOs in cadence decode/encode Future roadmap \u00b6 See the issues open in the github milestones","title":"Roadmap"},{"location":"roadmap/#roadmap","text":"\u26cf\ufe0f WIP","title":"Roadmap"},{"location":"roadmap/#mvp-roadmap","text":"Items that need to be addressed for flow-py-sdk to be considered usable. At which point it will become V1. Any contributions to items on this list (or not on the list and you think they should be) are very welcome.","title":"MVP Roadmap"},{"location":"roadmap/#docs","text":"[x] Create docs folder [x] setup mkdocs [ ] Usage example docs: [ ] create account [ ] transfer flow [ ] contribution docs","title":"Docs"},{"location":"roadmap/#examples","text":"[x] move examples folder to root folder [x] make each example runnable separately [x] write instructions for running examples [ ] add more comments to examples [x] add examples to ci [ ] add more examples","title":"Examples"},{"location":"roadmap/#tests","text":"[x] add cadence decode/encode tests [ ] add more tests [x] add CI for tests","title":"Tests"},{"location":"roadmap/#ci","text":"[x] release automation","title":"CI"},{"location":"roadmap/#implementation","text":"[x] decode event payload from grpc [x] implement TODOs in cadence decode/encode","title":"Implementation"},{"location":"roadmap/#future-roadmap","text":"See the issues open in the github milestones","title":"Future roadmap"},{"location":"scripts/","text":"Scripts \u00b6 Cadence scripts can be used to get information from the Flow blockchain. You can see scripts in action in the examples here . Sending scripts \u00b6 To following code can be used to send a script to an access ot the emulator. from flow_py_sdk import flow_client, Script # ... async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main() { let a = 1 let b = 1 log(a + b) } \"\"\" ) await client.execute_script(script) If this script is sent to the emulator, the log will be visible in the emulator output. Getting script results \u00b6 The return value of client.execute_script is the script result if the script returns a result. The type of the result is an abstract cadence.Value . async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(): Int { let a = 1 let b = 1 return a + b } \"\"\" ) result = await client.execute_script(script) a_plus_b = result.as_type(cadence.Int).value Sending scripts with parameters \u00b6 To execute scripts with arguments (parameters) two approaches can be used. By using __init__ parameters. async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\", arguments=[cadence.Int(1), cadence.Int(1)] ) await client.execute_script(script) By using add_arguments . async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\" ).add_arguments(cadence.Int(1), cadence.Int(1)) await client.execute_script(script) add_arguments can also be used to add one argument at a time. async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\" ).add_arguments(cadence.Int(1)).add_arguments(cadence.Int(1)) await client.execute_script(script) All arguments ned to be a cadence.Value otherwise a NotCadenceValueError is raised.","title":"Scripts"},{"location":"scripts/#scripts","text":"Cadence scripts can be used to get information from the Flow blockchain. You can see scripts in action in the examples here .","title":"Scripts"},{"location":"scripts/#sending-scripts","text":"To following code can be used to send a script to an access ot the emulator. from flow_py_sdk import flow_client, Script # ... async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main() { let a = 1 let b = 1 log(a + b) } \"\"\" ) await client.execute_script(script) If this script is sent to the emulator, the log will be visible in the emulator output.","title":"Sending scripts"},{"location":"scripts/#getting-script-results","text":"The return value of client.execute_script is the script result if the script returns a result. The type of the result is an abstract cadence.Value . async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(): Int { let a = 1 let b = 1 return a + b } \"\"\" ) result = await client.execute_script(script) a_plus_b = result.as_type(cadence.Int).value","title":"Getting script results"},{"location":"scripts/#sending-scripts-with-parameters","text":"To execute scripts with arguments (parameters) two approaches can be used. By using __init__ parameters. async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\", arguments=[cadence.Int(1), cadence.Int(1)] ) await client.execute_script(script) By using add_arguments . async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\" ).add_arguments(cadence.Int(1), cadence.Int(1)) await client.execute_script(script) add_arguments can also be used to add one argument at a time. async with flow_client(host=access_node_host, port=access_node_port) as client: script = Script( code=\"\"\" pub fun main(a: Int, b: Int) { log(a + b) } \"\"\" ).add_arguments(cadence.Int(1)).add_arguments(cadence.Int(1)) await client.execute_script(script) All arguments ned to be a cadence.Value otherwise a NotCadenceValueError is raised.","title":"Sending scripts with parameters"},{"location":"transactions/","text":"Transactions \u00b6 \u26cf\ufe0f WIP","title":"Transactions"},{"location":"transactions/#transactions","text":"\u26cf\ufe0f WIP","title":"Transactions"},{"location":"usage/","text":"Usage Overview \u00b6","title":"Usage Overview"},{"location":"usage/#usage-overview","text":"","title":"Usage Overview"}]}